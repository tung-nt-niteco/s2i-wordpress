#!/bin/bash

readonly WP_BASE_DIR=/opt/app-root/src

# The wp-content directory is empty, which means we run Wordpress for the first
# time or we run wordpress on ephemeral volume.
# We copy the original installation files in that case.
if [ ! "$(ls -A /opt/app-root/wp-content)" ]; then
  echo "-> Installing base Wordpress plugins and themes ..."
  rsync --stats -rlhO ${WP_BASE_DIR}/wp-content-install/* /opt/app-root/wp-content/
fi

if [ "$(ls -A ${WP_BASE_DIR}/wp-content)" ]; then
  mv ${WP_BASE_DIR}/wp-content ${WP_BASE_DIR}/.wp-content-git
  echo "-> Installing provided user content..."
  for i in $(ls -A1 ${WP_BASE_DIR}/.wp-content-git/); do
    echo "--> Rsyncing $i"
    rsync --stats -rlhOdH --itemize-changes --no-times --no-owner --size-only ${WP_BASE_DIR}/.wp-content-git/$i/* /opt/app-root/wp-content/$i/ &
  done
fi

echo "-> Linking './wp-content' to persistent volume ..."
ln -sf /opt/app-root/wp-content ${WP_BASE_DIR}/wp-content

# Setup defaults
export WORDPRESS_TABLE_PREFIX=${WORDPRESS_TABLE_PREFIX:-"wp_"}
export WORDPRESS_DEBUG=${WORDPRESS_DEBUG:-"false"}
export WORDPRESS_MULTISITE=${WORDPRESS_MULTISITE:-"false"}
export WORDPRESS_AUTH_KEY=${WORDPRESS_AUTH_KEY:-"8kbs6rtoD2siI1gwk0laCcu6LSkN+Ja6QFeUMaX"}
export WORDPRESS_SECURE_AUTH_KEY=${WORDPRESS_SECURE_AUTH_KEY:-"83kbs6rD2siI1gwk0laHSCcu6LSkN+Ja6QFeUMaX"}
export WORDPRESS_LOGGED_IN_KEY=${WORDPRESS_LOGGED_IN_KEY:-"83kbs6rt2siI1gwk0laHSCcu6LSkN+Ja6QFeUMaX"}
export WORDPRESS_NONCE_KEY=${WORDPRESS_NONCE_KEY:-"83kbs6rtoD2siI1gwk0laHSCcu6LSkN+Ja6eUMaX"}
export WORDPRESS_AUTH_SALT=${WORDPRESS_AUTH_SALT:-"83kbs6rtoD2siI1gwk0laHSCcu6LSkN+Ja6QFeaX"}
export WORDPRESS_SECURE_AUTH_SALT=${WORDPRESS_SECURE_AUTH_SALT:-"83kbs6rtoD2siI1gwk0laH6LSkN+Ja6QFeUMaX"}
export WORDPRESS_LOGGED_IN_SALT=${WORDPRESS_LOGGED_IN_SALT:-"83kbs62siI1gwk0laHSCcu6LSkN+Ja6QFeUMaX"}
export WORDPRESS_NONCE_SALT=${WORDPRESS_NONCE_SALT:-"83s6rtoD2siI1gwk0laHSC6LSkN+Ja6QFeUMaX"}
export WP_MEMORY_LIMIT=${WP_MEMORY_LIMIT:-"256M"}
export WP_MAX_MEMORY_LIMIT=${WP_MAX_MEMORY_LIMIT:-"256M"}
export WP_CACHE=${WP_CACHE:-"false"}
# Do nothing if user provided custom configuration file
# If not, generate one.
if [ ! -f ${WP_BASE_DIR}/wp-config.php ]; then
  # Check all required variable
  [[ -z "${WORDPRESS_DB_NAME}" ]]     && echo "The WORDPRESS_DB_NAME variable must be set." && exit 1
  [[ -z "${WORDPRESS_DB_USER}" ]]     && echo "The WORDPRESS_DB_USER variable must be set." && exit 1
  [[ -z "${WORDPRESS_DB_PASSWORD}" ]] && echo "The WORDPRESS_DB_PASSWORD variable must be set." && exit 1
  [[ -z "${WORDPRESS_DB_HOST}" ]]     && echo "The WORDPRESS_DB_HOST variable must be set." && exit 1
  cat <<EOF > /tmp/wp-config.php
<?php
define('DB_NAME',          getenv('WORDPRESS_DB_NAME'));
define('DB_USER',          getenv('WORDPRESS_DB_USER'));
define('DB_PASSWORD',      getenv('WORDPRESS_DB_PASSWORD'));
define('DB_HOST',          getenv('WORDPRESS_DB_HOST'));
define('DB_CHARSET',       'utf8');
define('DB_COLLATE',       '');
define('AUTH_KEY',         getenv('WORDPRESS_AUTH_KEY'));
define('SECURE_AUTH_KEY',  getenv('WORDPRESS_SECURE_AUTH_KEY'));
define('LOGGED_IN_KEY',    getenv('WORDPRESS_LOGGED_IN_KEY'));
define('NONCE_KEY',        getenv('WORDPRESS_NONCE_KEY'));
define('AUTH_SALT',        getenv('WORDPRESS_AUTH_SALT'));
define('SECURE_AUTH_SALT', getenv('WORDPRESS_SECURE_AUTH_SALT'));
define('LOGGED_IN_SALT',   getenv('WORDPRESS_LOGGED_IN_SALT'));
define('NONCE_SALT',       getenv('WORDPRESS_NONCE_SALT'));

\$table_prefix  = '${WORDPRESS_TABLE_PREFIX}';
define('WP_DEBUG', ${WORDPRESS_DEBUG});
if ( WP_DEBUG ) {
    define( 'WP_DEBUG_LOG', true );
    define( 'WP_DEBUG_DISPLAY', false );
}
define( 'WP_MEMORY_LIMIT', '${WP_MEMORY_LIMIT}' );
define( 'WP_CACHE', ${WP_CACHE} );
// Back-end
define( 'WP_MAX_MEMORY_LIMIT', '${WP_MAX_MEMORY_LIMIT}' );
//
EOF

  # multisite support
  if ${WORDPRESS_MULTISITE}; then
    echo "Enabling multisite functionality..."
    [[ -z "${WORDPRESS_DOMAIN_CURRENT_SITE}" ]] && echo "The WORDPRESS_DOMAIN_CURRENT_SITE variable must be set." && exit 1
    [[ -z "${WORDPRESS_HOME}" ]] && echo "The WORDPRESS_HOME variable must be set." && exit 1
    [[ -z "${WORDPRESS_SITEURL}" ]] && echo "The WORDPRESS_SITEURL variable must be set." && exit 1
    cat <<EOF >> /tmp/wp-config.php
define( 'WP_ALLOW_MULTISITE', true );
define('MULTISITE', true);
define('SUBDOMAIN_INSTALL', false);
define('PATH_CURRENT_SITE', '/');
define('SITE_ID_CURRENT_SITE', 1);
define('BLOG_ID_CURRENT_SITE', 1);
define('DOMAIN_CURRENT_SITE', '${WORDPRESS_DOMAIN_CURRENT_SITE}');
define('WP_HOME','${WORDPRESS_HOME}');
define('WP_SITEURL','${WORDPRESS_SITEURL}');
EOF
  fi

  # Completize configuration
  cat ../templates/wp-config.php.template >> /tmp/wp-config.php
  echo "-> Generated new wp-config.php file ..."
  mv /tmp/wp-config.php /opt/app-root/src/wp-config.php
fi
if ${WORDPRESS_DEBUG}; then
  echo "Wordpress debug enabled....."
  echo "wp-config:"
  cat /opt/app-root/src/wp-config.php
fi
echo -e "-> Wordpress is now configured!\n"

echo "-> Optimizing memory settings for caches and httpd..."

echo -e "-> Setting up APCU cache..."
export APCU_MEMORY_CONSUMPTION=${APCU_MEMORY_CONSUMPTION:-128}
envsubst < ../templates/40-apcu.template > ${PHP_SYSCONF_PATH}/php.d/40-apcu.ini

echo -e "-> Adding default .htaccess"
if [ ! -f /opt/app-root/src/.htaccess ]; then
    cat <<EOF > /opt/app-root/src/.htaccess

# BEGIN WordPress
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
# END WordPress

<IfModule mod_php5.c>
php_value max_execution_time 60
</IfModule>

<IfModule mod_php7.c>
php_value max_execution_time 60
</IfModule>

<IfModule mod_php7.c>
php_value max_execution_time 60
php_value realpath_cache_size  4M
php_value realpath_cache_ttl 300
</IfModule>

SetEnv HTTPS on
EOF
fi
exec ${STI_SCRIPTS_PATH}/run-base
